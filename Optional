#include <iostream>
#include <stdexcept>
#include <utility>

template<typename T>
class MyOptional {
private:
    bool has_value_;
    T value_;

public:
    
    MyOptional() : has_value_(false) {}


    MyOptional(const MyOptional& other)
        : has_value_(other.has_value_) {
        if (has_value_) value_ = other.value_;
    }

    
    MyOptional(MyOptional&& other) noexcept
        : has_value_(other.has_value_) {
        if (has_value_) value_ = std::move(other.value_);
    }

    
    MyOptional(const T& value) : has_value_(true), value_(value) {}
    MyOptional(T&& value) : has_value_(true), value_(std::move(value)) {}

    
    MyOptional& operator=(const MyOptional& other) {
        if (this != &other) {
            has_value_ = other.has_value_;
            if (has_value_) value_ = other.value_;
        }
        return *this;
    }

    
    MyOptional& operator=(MyOptional&& other) noexcept {
        if (this != &other) {
            has_value_ = other.has_value_;
            if (has_value_) value_ = std::move(other.value_);
        }
        return *this;
    }

    
    ~MyOptional() = default;

  
    bool has_value() const {
        return has_value_;
    }

    T& value() {
        if (!has_value_) throw std::runtime_error("No value present!");
        return value_;
    }

    const T& value() const {
        if (!has_value_) throw std::runtime_error("No value present!");
        return value_;
    }

    T value_or(const T& default_value) const {
        return has_value_ ? value_ : default_value;
    }

    void reset() {
        has_value_ = false;
    }


    template<typename... Args>
    void emplace(Args&&... args) {
        value_ = T(std::forward<Args>(args)...);
        has_value_ = true;
    }


    operator bool() const {
        return has_value_;
    }
};
