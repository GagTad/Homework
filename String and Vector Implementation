#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

class CustomString {
private:
    string str;

public:
    // Constructor
    CustomString(const string& s = "") : str(s) {}

    // Getters and Setters
    string get() const { return str; }
    void set(const string& s) { str = s; }

    // Common functions
    size_t size() const { return str.size(); }
    bool isEmpty() const { return str.empty(); }
    void clear() { str.clear(); }

    // Specific functions
    void append(const string& s) { str += s; }
    void toUpperCase() {
        transform(str.begin(), str.end(), str.begin(), ::toupper);
    }
    void reverse() { std::reverse(str.begin(), str.end()); }

    // Print function
    void print() const { cout << "String: " << str << endl; }
};

class CustomVector {
private:
    vector<int> vec;

public:
    // Constructor
    CustomVector(const vector<int>& v = {}) : vec(v) {}

    // Getters and Setters
    vector<int> get() const { return vec; }
    void set(const vector<int>& v) { vec = v; }

    // Common functions
    size_t size() const { return vec.size(); }
    bool isEmpty() const { return vec.empty(); }
    void clear() { vec.clear(); }

    // Specific functions
    void append(int value) { vec.push_back(value); }
    void sort() { std::sort(vec.begin(), vec.end()); }
    void reverse() { std::reverse(vec.begin(), vec.end()); }

    // Print function
    void print() const {
        cout << "Vector: ";
        for (int v : vec) cout << v << " ";
        cout << endl;
    }
};

int main() {
    // Testing CustomString
    CustomString myString("Hello");
    myString.print();
    myString.append(" World");
    //myString.append("dffffff");
    myString.toUpperCase();
    myString.reverse();
    myString.print();

    // Testing CustomVector
    CustomVector myVector({5, 2, 9, 1});
    myVector.print();
    myVector.append(7);
    myVector.sort();
    myVector.reverse();
    myVector.print();

    return 0;
}
