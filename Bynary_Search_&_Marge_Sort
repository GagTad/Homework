void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;
 
    int L[n1], R[n2];
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];
 
    int i = 0, j = 0, k = left;
 
  
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
   
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
 
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
 
        
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
 
        // add
        merge(arr, left, mid, right);
    }
}
 
 
  
 
int BynarySearch(int arr[],int size, int searchvalue )
{
    int low=0;
    int high=size-1;
    
    while(low<=high)
    {
    int mid=(low+high)/2;
    if(searchvalue ==arr[mid])
    {
        return mid;
    }
    else if(searchvalue>arr[mid])
    {
        low=mid+1;
    }
    else
    {
        high=mid-1;
    }
    }
    return -1;
}
